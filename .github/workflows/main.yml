name: Deployments
on:
  pull_request:
    branches: [main, development, staging]
  push:
    branches: [main, development, staging]

jobs:
  build_and_test_dev:
    name: Build and Test Development
    if: github.event.ref == 'refs/heads/development'
    runs-on: macos-latest
    environment:
      name: development
    steps:
      - name: "List all simulators"
        run: "xcrun xctrace list devices"
      - name: Start Simulator
        run: xcrun simctl boot "iPhone 14 Pro Max"
      - name: Wait for Simulator to Boot
        run: sleep 30
      - name: "Checkout"
        uses: actions/checkout@v2
      - name: "Setup Flutter"
        uses: subosito/flutter-action@v1
        with:
          flutter-version: "3.16.4"
      - run: flutter pub get
      - run: flutter test test/unit/ --flavor development
      - run: flutter test test/widget/ --flavor development
      - run: flutter test --flavor development integration_test

  build_and_test_staging:
    name: Build and Test Staging
    if: github.event.ref == 'refs/heads/staging'
    runs-on: macos-latest
    environment:
      name: staging
    steps:
      - name: "List all simulators"
        run: "xcrun xctrace list devices"
      - name: Start Simulator
        run: xcrun simctl boot "iPhone 14 Pro Max"
      - name: Wait for Simulator to Boot
        run: sleep 30
      - name: "Checkout"
        uses: actions/checkout@v2
      - name: "Setup Flutter"
        uses: subosito/flutter-action@v1
        with:
          flutter-version: "3.16.4"
      - run: flutter pub get
      - run: flutter test test/unit/ --flavor staging
      - run: flutter test test/widget/ --flavor staging
      - run: flutter test --flavor staging integration_test

  build_and_test_main:
    name: Build and Test Production
    if: github.event.ref == 'refs/heads/main'
    runs-on: macos-latest
    environment:
      name: production
    steps:
      - name: "List all simulators"
        run: "xcrun xctrace list devices"
      - name: Start Simulator
        run: xcrun simctl boot "iPhone 14 Pro Max"
      - name: Wait for Simulator to Boot
        run: sleep 30
      - name: "Checkout"
        uses: actions/checkout@v2
      - name: "Setup Flutter"
        uses: subosito/flutter-action@v1
        with:
          flutter-version: "3.16.4"
      - run: flutter pub get
      - run: flutter test test/unit/ --flavor production
      - run: flutter test test/widget/ --flavor production
      - run: flutter test --flavor production integration_test

  deploy_android_dev:
    name: Deploy Android to Development
    if: github.event.ref == 'refs/heads/development'
    runs-on: macos-latest
    environment:
      name: development
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2
      - name: Download Android keystore
        id: android_keystore
        uses: timheuer/base64-to-file@v1.0.3
        with:
          fileName: upload-keystore.jks
          encodedString: ${{ secrets.ANDROID_KEYSTORE_FILE_BASE64 }}
      - name: Create key.properties
        run: |
          echo "storeFile=${{ steps.android_keystore.outputs.filePath }}" > android/key.properties
          echo "storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" >> android/key.properties
          echo "keyPassword=${{ secrets.ANDROID_SIGNING_KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.ANDROID_SIGNING_KEY_ALIAS }}" >> android/key.properties
      - name: "Setup Java"
        uses: actions/setup-java@v1
        with:
          java-version: "12.x"
      - name: "Setup Flutter"
        uses: subosito/flutter-action@v1
        with:
          flutter-version: "3.16.4"
      - run: flutter pub get
      - run: flutter build appbundle --release --flavor development --target=lib/main_development.dart
      - name: "Upload App Bundle"
        uses: actions/upload-artifact@v2
        with:
          name: apk-release
          path: build/app/outputs/bundle/developmentRelease/app-development-release.aab

  deploy_android_staging:
    name: Deploy Android to Staging
    if: github.event.ref == 'refs/heads/staging'
    runs-on: macos-latest
    environment:
      name: staging
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2
      - name: Download Android keystore
        id: android_keystore
        uses: timheuer/base64-to-file@v1.0.3
        with:
          fileName: upload-keystore.jks
          encodedString: ${{ secrets.ANDROID_KEYSTORE_FILE_BASE64 }}
      - name: Create key.properties
        run: |
          echo "storeFile=${{ steps.android_keystore.outputs.filePath }}" > android/key.properties
          echo "storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" >> android/key.properties
          echo "keyPassword=${{ secrets.ANDROID_SIGNING_KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.ANDROID_SIGNING_KEY_ALIAS }}" >> android/key.properties
      - name: "Setup Java"
        uses: actions/setup-java@v1
        with:
          java-version: "12.x"
      - name: "Setup Flutter"
        uses: subosito/flutter-action@v1
        with:
          flutter-version: "3.16.4"
      - run: flutter pub get
      - run: flutter build appbundle --release --flavor staging --target=lib/main_staging.dart
      - name: "Upload App Bundle"
        uses: actions/upload-artifact@v2
        with:
          name: apk-release
          path: build/app/outputs/bundle/stagingRelease/app-staging-release.aab

  deploy_android_main:
    name: Deploy Android to Production
    if: github.event.ref == 'refs/heads/main'
    runs-on: macos-latest
    environment:
      name: production
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2
      - name: Download Android keystore
        id: android_keystore
        uses: timheuer/base64-to-file@v1.0.3
        with:
          fileName: upload-keystore.jks
          encodedString: ${{ secrets.ANDROID_KEYSTORE_FILE_BASE64 }}
      - name: Create key.properties
        run: |
          echo "storeFile=${{ steps.android_keystore.outputs.filePath }}" > android/key.properties
          echo "storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" >> android/key.properties
          echo "keyPassword=${{ secrets.ANDROID_SIGNING_KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.ANDROID_SIGNING_KEY_ALIAS }}" >> android/key.properties
      - name: "Setup Java"
        uses: actions/setup-java@v1
        with:
          java-version: "12.x"
      - name: "Setup Flutter"
        uses: subosito/flutter-action@v1
        with:
          flutter-version: "3.16.4"
      - run: flutter pub get
      - run: flutter build appbundle --release --flavor production --target=lib/main_production.dart
      - name: "Upload App Bundle"
        uses: actions/upload-artifact@v2
        with:
          name: apk-release
          path: build/app/outputs/bundle/productionRelease/app-production-release.aab

  deploy_ios_dev:
    name: Deploy iOS to Development
    if: github.event.ref == 'refs/heads/development'
    runs-on: macos-latest
    environment:
      name: development
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2
      # Install the Apple certificate and provisioning profile
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - name: "Setup Flutter"
        uses: subosito/flutter-action@v1
        with:
          flutter-version: "3.16.4"
      - run: flutter pub get
      - run: flutter build ipa --release --flavor development --target=lib/main_development.dart --export-options-plist=ExportOptions.plist
      - name: "Upload iOS App"
        uses: actions/upload-artifact@v2
        with:
          name: ipa-release
          path: build/ios/ipa/stopwatch_app.ipa
      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision

  deploy_ios_staging:
    name: Deploy iOS to Staging
    if: github.event.ref == 'refs/heads/staging'
    runs-on: macos-latest
    environment:
      name: staging
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2
      # Install the Apple certificate and provisioning profile
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - name: "Setup Flutter"
        uses: subosito/flutter-action@v1
        with:
          flutter-version: "3.16.4"
      - run: flutter pub get
      - run: flutter build ipa --release --flavor staging --target=lib/main_staging.dart --export-options-plist=ExportOptions.plist
      - name: "Upload iOS App"
        uses: actions/upload-artifact@v2
        with:
          name: ipa-release
          path: build/ios/ipa/stopwatch_app.ipa
      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision

  deploy_ios_main:
    name: Deploy iOS to Production
    if: github.event.ref == 'refs/heads/main'
    runs-on: macos-latest
    environment:
      name: production
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2
      # Install the Apple certificate and provisioning profile
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - name: "Setup Flutter"
        uses: subosito/flutter-action@v1
        with:
          flutter-version: "3.16.4"
      - run: flutter pub get
      - run: flutter build ipa --release --flavor production --target=lib/main_production.dart --export-options-plist=ExportOptions.plist
      - name: "Upload iOS App"
        uses: actions/upload-artifact@v2
        with:
          name: ipa-release
          path: build/ios/ipa/stopwatch_app.ipa
      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision
